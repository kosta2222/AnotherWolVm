"В стек входит"
кроме 2-х словарей 1 словарь
values=Map<str,класс Value>

класс Value выражает из строк литералов типы void,bool,double,int
=================================================================
кстати если ты заметишь, то переменные объявляются с геттерами и, что необязательно (тогда это будет как константа), сеттерами
=================================================================
и ещё можно заметить что иногда пишется &this.age а иногда @this.age
 
& - это ссылка на объект
 
то есть ключ-значение в словаре с полями
 
в данном случае у нас &this.age в c# коде будет возвращать KeyValuePair<string, Value> из словаря fields в классе который мы обрабатываем
 
на "слух" воспринимается сложно, но если порыться в коде или объяснить на рисунках то можно понять
 
хотя я это пока только реализую
 
т.е. этого ещё нет в коде
 
@ - это значение которое хранится в передаваемой переменной
 
то есть @this.age нам вернёт Value
=============================
А что делает строковая инструкция _loads?)
Новые сообщения
Аркадий
Аркадий 14:28
 
Добавляются в файл выражения из фреймворка
Пересланные сообщения
Аркадий
Аркадий
вчера в 13:03
типо ты можешь делать свои библиотеки которые расширят функционал языка
просто делаешь по документации (вообще ничего сложного) а затем добавляешь в папку и всё готово))
 
Ну это кратко
=============================
такие текстовые инструкции сразу скажу называются выражениями
 
методы вызываются примерно так:
@var#method : arguments ;
 
а статические
 
$class#method : args ;
 
а объект создаётся выражением New : $class#constructor ;
 
хотя я толком не думал об этом и тем более не создавал это в коде 
 
хотя возможно я сделаю специальный символ для того, чтобы код искал в консрукторах
 
^ может такой
 
вот деструктор будет вызываться Destroy : &varname, args of destructor ;
 Аркадий
Аркадий 15:10
 
деструктор просто удаляет ключ-значение (переменную) из словаря
===================================================
Почему можно
 
Что там не так
 
Мы ищем класс по названию
 
Затем в этом классе ищем метод по имени
===========================================
Я вот кстати много думаю об этой теме
 
И смотри что получается
 
Массив это коллекция
 
То есть он наследуется от Collection
 
Там у wolClass даже статический метод есть
==========================
(load_bytecode,load_name,invoke_function,make_function,iconst,iload,_return,_loads,end_file_end)=range(9)
class Variable:

    def __init__(self):
        self.intValue=0
        self.floatValue=0.0
        self.charValue=''
        self.strValue=[] # C as char* for names
        self.bytecode:list=[] # function body C as unsigned char*

class Stack:

    def __init__(self):
        self.mas:list=[]
    def pushInt(self,i:int):
        self.tmp:Variable=Variable()
        self.tmp.intValue=i
        self.mas.append(self.tmp)

    def popInt(self):
        return self.mas.pop().intValue 

    def pushFloat(self,fl:float):
        self.tmp:Variable=Variable()
        self.tmp.floatValue=fl
        self.mas.append(self.tmp)

    def popFloat(self):
        return self.mas.pop().floatValue 

    def pushStrValue(self,s:list):
        self.tmp:Variable=Variable()
        self.tmp.strValue=s
        self.mas.append(self.tmp)

    def popStrValue(self):
        return self.mas.pop().strValue

    def pushCharValue(self,c:list):
        self.tmp:Variable=Variable()
        self.tmp.charValue=c
        self.mas.append(self.tmp)

    def popCharValue(self):
        return self.mas.pop().charValue

    def pushBytecode(self,b:list):
        self.tmp:Variable=Variable()
        self.tmp.bytecode=b
        self.mas.append(self.tmp)

    def popBytecode(self):
        return self.mas.pop().bytecode 

bytecode=[
      load_name,0,"System",
      _loads,

      load_name,0,"sum_func",
      load_bytecode,5,iconst,0,iload,1,_return,
      iconst,0,
      make_function,

      load_name,0,"sum_func",
      invoke_function,
      end_file_end
      ]
      #self.mainStack=Stack()
def execute(b_c:list):

    functions={}
    mainStack=Stack()
    ip=0
    while(True):
      op=b_c[ip]
    
      if op==load_bytecode:
        ip+=1
        amount_b_c=b_c[ip]

        b_c_par=[]
        for i in range(amount_b_c):
           b_c_par.append(b_c[ip+i])
       
        print(b_c_par)
        mainStack.pushBytecode(b_c_par)
        ip+=amount_b_c
      if op==load_name:
        ip+=1
        amount=b_c[ip]
        
        ip+=1
        str_par=b_c[ip]
       # for i in range(ip,amount+1):
        #   str_par.append(i)
       
        print(str_par)

        mainStack.pushStrValue(str_par)
        
      elif op==iconst:
         ip+=1
         arg=b_c[ip]
         
      elif op==end_file_end:
        break
      ip+=1

execute(bytecode)
System
sum_func
[5, 4, 0, 5, 1]
sum_func
===========================
elif mas_I_Or_Str[0] == 'defun': #определить функцию 
        self.nCountMethods+=1
        (_,str_nameFunc, list_arg,body_expr) = mas_I_Or_Str
        argStrLen=len(str_nameFunc) + 1 # + 1 для 0-завершителя строки
        self.me_gen_byteCode_SIrV(argStrLen)
        byteArrStr=bytearray(str_nameFunc,'cp1251')
        for i in byteArrStr:
            self.me_gen_byteCode_SIrV(i)
            
        self.me_gen_byteCode_SIrV(0) # 0 - завершитель строки
        
        self.me_gen_byteCode_SIrV(0)
        self.me_gen_byteCode_SIrV(0)
        nAddr1=len(self.fi_mas_I_byteCode)
        self.me_recurs_evalPerList_SMrV(list_arg)    
        self.me_recurs_evalPerList_SMrV(body_expr) 
        if str_nameFunc=='main':
            self.me_gen_byteCode_SIrV(STOP)
        nByteCodeMethodLen=len(self.fi_mas_I_byteCode)-(nAddr1)
        
        self.fi_mas_I_byteCode[nAddr1-2]=shortToBytes_SintRbytes(nByteCodeMethodLen)[0]
        self.fi_mas_I_byteCode[nAddr1-1]=shortToBytes_SintRbytes(nByteCodeMethodLen)[1]        
